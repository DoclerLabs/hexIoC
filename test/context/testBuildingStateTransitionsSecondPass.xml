<?xml version="1.0" encoding="utf-8" ?>
<root>

	<state id="assemblingStart2" ref="this.state.ASSEMBLING_START">
		<enter command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
		<exit command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
	</state>
	
	<state id="objectsBuilt2" ref="this.state.OBJECTS_BUILT">
		<enter command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
		<exit command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
	</state>
	
	<state id="domainListenersAssigned2" ref="this.state.DOMAIN_LISTENERS_ASSIGNED">
		<enter command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
		<exit command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
	</state>
	
	<state id="methodsCalled2" ref="this.state.METHODS_CALLED">
		<enter command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
		<exit command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
	</state>
	
	<state id="modulesInitialized2" ref="this.state.MODULES_INITIALIZED">
		<enter command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
		<exit command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
	</state>
	
	<state id="assemblingEnd2" ref="this.state.ASSEMBLING_END">
		<enter command-class="hex.ioc.parser.xml.assembler.mock.AnotherMockStateCommand"/>
	</state>
	
	<module id="module2" type="hex.ioc.parser.xml.assembler.mock.MockModule" map-type="hex.module.IModule"/>
	
</root>