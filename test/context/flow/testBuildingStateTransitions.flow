@context( name = 'applicationContext' )
{
	emptyState = state();
	
	assemblingStart = 
	state( ref( this.state.ASSEMBLING_START ) )
		.enter( hex.ioc.parser.xml.assembler.mock.MockStateCommand )
		.exit( hex.ioc.parser.xml.assembler.mock.MockStateCommand );

	objectsBuilt = 
	state( ref( this.state.OBJECTS_BUILT ) )
		.enter( hex.ioc.parser.xml.assembler.mock.MockStateCommand )
		.exit( hex.ioc.parser.xml.assembler.mock.MockStateCommand );
	
	domainListenersAssigned =
	state( ref( this.state.DOMAIN_LISTENERS_ASSIGNED ) )
		.enter( hex.ioc.parser.xml.assembler.mock.MockStateCommand )
		.exit( hex.ioc.parser.xml.assembler.mock.MockStateCommand );
	
	methodsCalled =
	state( ref( this.state.METHODS_CALLED ) )
		.enter( hex.ioc.parser.xml.assembler.mock.MockStateCommand )
		.exit( hex.ioc.parser.xml.assembler.mock.MockStateCommand );
	
	modulesInitialized =
	state( ref( this.state.MODULES_INITIALIZED ) )
		.enter( hex.ioc.parser.xml.assembler.mock.MockStateCommand )
		.exit( hex.ioc.parser.xml.assembler.mock.MockStateCommand );
	
	assemblingEnd =
	state( ref( this.state.ASSEMBLING_END ) )
		.enter( hex.ioc.parser.xml.assembler.mock.MockStateCommand )
		.exit( hex.ioc.parser.xml.assembler.mock.MockStateCommand );
}